{"version":3,"file":"static/js/36.8c81a630.chunk.js","mappings":"kTAEaA,EAAgBC,EAAAA,EAAAA,IAAH,wbAkBbC,EAAOD,EAAAA,EAAAA,KAAH,8KAUJE,EAAQF,EAAAA,EAAAA,MAAH,0PAeLG,EAAYH,EAAAA,EAAAA,OAAH,ga,SCItB,EA3CkB,SAAC,GAAkB,IAAD,EAAfI,EAAe,EAAfA,SACnB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAU,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,GAkBhD,OACE,SAACV,EAAD,WACE,UAACE,EAAD,YACE,SAACE,EAAD,CAAWO,KAAK,SAASC,QAbN,SAAAC,GACvBA,EAAEC,iBACF,IAAMC,EAAiBN,EAAWO,OAAOC,cACrCF,EACFV,EAASU,IAETG,EAAAA,EAAAA,IAAM,kBAET,EAKK,UACE,SAAC,MAAD,CAAiBC,KAAK,UAGxB,SAAChB,EAAD,CACEQ,KAAK,OACLS,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZC,UAAU,KACVC,MAAOf,EACPgB,SA9Bc,SAAAZ,GACpB,IAAMa,EAAcb,EAAEc,cAAcH,MAEpChB,EADkC,KAAhBkB,EAAqB,CAAEE,MAAOF,GAAgB,CAAC,EAElE,QA+BF,E,wCC4BD,EA9De,WACb,OAAiBpB,EAAAA,EAAAA,MAAVuB,GAAP,eACA,GAA4BC,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,WAAS,kBAAMD,EAAOnB,IAAI,QAAjB,IAAnC,eAAOkB,EAAP,KAAcK,EAAd,KACA,GAAkCH,EAAAA,EAAAA,WAAS,GAA3C,eAAOI,EAAP,KAAkBC,EAAlB,KACA,GAAeL,EAAAA,EAAAA,WAAS,WAAO,IAAD,IACtBM,EAAYC,eAAeC,QAAQ,mBACzC,2BAAOC,KAAKC,MAAMJ,UAAlB,aAAO,EAAuBK,kBAA9B,QAA4C,CAC7C,IAHMC,GAAP,gBAKAC,EAAAA,EAAAA,YAAU,WACe,KAAb,OAANZ,QAAM,IAANA,OAAA,EAAAA,EAAQa,SACVC,OAAOC,SAAS,EAAGJ,EAEtB,GAAE,CAACA,EAAMX,KAEVY,EAAAA,EAAAA,YAAU,WACR,IAAMI,EAAa,IAAIC,gBACjBC,EAAgB,mCAAG,yFAClBrB,EADkB,iEAKrBO,GAAa,GALQ,SAMEe,EAAAA,EAAAA,WAAoB,CAAEtB,MAAAA,EAAOmB,WAAAA,IAN/B,gBAMbI,EANa,EAMbA,KACRnB,GAAUoB,EAAAA,EAAAA,IAAiBD,EAAKE,UAPX,kDASC,aAAlB,KAAMC,WACRpC,EAAAA,EAAAA,IAAM,+CACNqC,QAAQC,IAAR,OAXmB,yBAcrBrB,GAAa,GAdQ,6EAAH,qDAkBtB,OADAc,IACO,WACLF,EAAWU,OACZ,CACF,GAAE,CAAC7B,IASJ,OACE,iCACE,SAAC,EAAD,CAAWvB,SATE,SAAAuB,GACfI,EAAU,MACVC,EAASL,EACV,IAOIM,IAAa,SAACwB,EAAA,EAAD,IACF,OAAX3B,GAAqC,IAAlBA,EAAOa,SACzB,SAACe,EAAA,EAAD,CAAYC,iBAPO,kBAAMC,EAAAA,EAAAA,GAAkB,aAAxB,EAO6B9B,OAAQA,IAE9C,OAAXA,GAAqC,IAAlBA,EAAOa,SACzB,gBAAKkB,IAAKC,EAAeC,IAAI,kBAIpC,C","sources":["components/Searchbar/Searchbar.styled.jsx","components/Searchbar/Searchbar.jsx","Pages/Movies/Movies.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const SearchbarWrap = styled.div`\n  position: sticky;\n  top: 25px;\n  z-index: 1100;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 64px;\n  padding-right: 24px;\n  padding-left: 24px;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  color: #fff;\n  background-color: #3f51b5;\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n`;\n\nexport const Form = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n`;\n\nexport const Input = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n  ::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n\nexport const SearchBtn = styled.button`\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  background-image: url('https://image.flaticon.com/icons/svg/149/149852.svg');\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  :hover {\n    opacity: 1;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { AiOutlineSearch } from 'react-icons/ai';\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchbarWrap, Form, Input, SearchBtn } from './Searchbar.styled';\nimport { toast } from 'react-toastify';\n\nconst Searchbar = ({ onSubmit }) => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const queryParam = searchParams.get('query') ?? '';\n\n  const onInputChange = e => {\n    const searchQuery = e.currentTarget.value;\n    const nextParam = searchQuery !== '' ? { query: searchQuery } : {};\n    setSearchParams(nextParam);\n  };\n\n  const onSearchBtnClick = e => {\n    e.preventDefault();\n    const formattedQuery = queryParam.trim().toLowerCase();\n    if (formattedQuery) {\n      onSubmit(formattedQuery);\n    } else {\n      toast('Enter something');\n    }\n  };\n\n  return (\n    <SearchbarWrap>\n      <Form>\n        <SearchBtn type=\"submit\" onClick={onSearchBtnClick}>\n          <AiOutlineSearch size=\"20\" />\n        </SearchBtn>\n\n        <Input\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n          maxLength=\"20\"\n          value={queryParam}\n          onChange={onInputChange}\n        />\n      </Form>\n    </SearchbarWrap>\n  );\n};\n\nSearchbar.propTypes = { onSubmit: PropTypes.func };\n\nexport default Searchbar;\n","import { useSearchParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { updScrollPosition } from 'utils/scroll';\nimport { normalizeResults } from 'utils/normalizeResponse';\nimport Searchbar from 'components/Searchbar';\nimport MoviesList from 'components/MoviesList';\nimport theMovie from 'services/theMovie';\nimport badRequestImg from 'images/badRequestImg.png';\nimport Loader from 'components/Loader';\n\nconst Movies = () => {\n  const [params] = useSearchParams();\n  const [movies, setMovies] = useState(null);\n  const [query, setQuery] = useState(() => params.get('query'));\n  const [isLoading, setIsLoading] = useState(false);\n  const [yPos] = useState(() => {\n    const positions = sessionStorage.getItem('scrollPositions');\n    return JSON.parse(positions)?.moviesPage ?? 0;\n  });\n\n  useEffect(() => {\n    if (movies?.length !== 0) {\n      window.scrollTo(0, yPos);\n    }\n  }, [yPos, movies]);\n\n  useEffect(() => {\n    const controller = new AbortController();\n    const getMoviesByQuery = async () => {\n      if (!query) {\n        return;\n      }\n      try {\n        setIsLoading(true);\n        const { data } = await theMovie.getByQuery({ query, controller });\n        setMovies(normalizeResults(data.results));\n      } catch (error) {\n        if (error.message !== 'canceled') {\n          toast('Something went wrong. Please reload page...');\n          console.log(error);\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getMoviesByQuery();\n    return () => {\n      controller.abort();\n    };\n  }, [query]);\n\n  const onSubmit = query => {\n    setMovies(null);\n    setQuery(query);\n  };\n\n  const onMovieCardClick = () => updScrollPosition('moviesPage');\n\n  return (\n    <>\n      <Searchbar onSubmit={onSubmit} />\n      {isLoading && <Loader />}\n      {movies !== null && movies.length !== 0 && (\n        <MoviesList onMovieCardClick={onMovieCardClick} movies={movies} />\n      )}\n      {movies !== null && movies.length === 0 && (\n        <img src={badRequestImg} alt=\"bad request\" />\n      )}\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["SearchbarWrap","styled","Form","Input","SearchBtn","onSubmit","useSearchParams","searchParams","setSearchParams","queryParam","get","type","onClick","e","preventDefault","formattedQuery","trim","toLowerCase","toast","size","autoComplete","autoFocus","placeholder","maxLength","value","onChange","searchQuery","currentTarget","query","params","useState","movies","setMovies","setQuery","isLoading","setIsLoading","positions","sessionStorage","getItem","JSON","parse","moviesPage","yPos","useEffect","length","window","scrollTo","controller","AbortController","getMoviesByQuery","theMovie","data","normalizeResults","results","message","console","log","abort","Loader","MoviesList","onMovieCardClick","updScrollPosition","src","badRequestImg","alt"],"sourceRoot":""}